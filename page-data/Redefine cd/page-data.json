{"componentChunkName":"component---src-templates-blog-post-js","path":"/Redefine cd/","result":{"data":{"site":{"siteMetadata":{"title":"Mingxin","siteUrl":"https://mingxin.io"}},"markdownRemark":{"id":"472d6bcd-9d7b-513d-8d59-e118e8c0df40","excerpt":"折腾vim…","html":"<p>折腾vim的时候发现一位插件作者的有趣小工具：<a href=\"https://zhuanlan.zhihu.com/p/35015221\">想跳转到一个目录，却只记得几个字母</a>。</p>\n<p>按照文章里面的思路操作之后使用了几天，果然比原来方便一些。不过也注意到有一些可以改进的地方。</p>\n<p>首先是这个工具使用了另外一个名字<code class=\"language-text\">j</code>，在每次需要目录跳转的时候需要和<code class=\"language-text\">cd</code>命令做区分：当需要正常跳转的时候用<code class=\"language-text\">cd</code>；模糊跳转的时候使用<code class=\"language-text\">j</code>。这也是我使用<code class=\"language-text\">z</code>时候的一个痛点，对于<code class=\"language-text\">cd</code>这样一个高频命令每次输入前需要在脑子里做个if还挺累的。</p>\n<p>所以我往前再进一步，直接把覆盖<code class=\"language-text\">cd</code>命令，在不不改变<code class=\"language-text\">cd</code>原有功能的前提下，增加了对历史访问过的目录的模糊跳转。(使用zsh)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> <span class=\"token function-name function\">cd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">builtin</span> <span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$1</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> -ne <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">then</span>\n    <span class=\"token assign-left variable\">dir</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>desc_z_history <span class=\"token operator\">|</span> fzy --query $1<span class=\"token variable\">)</span></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$dir</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span> -z <span class=\"token variable\">$dir</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">then</span>\n      <span class=\"token builtin class-name\">return</span>\n    <span class=\"token keyword\">else</span>\n      <span class=\"token builtin class-name\">builtin</span> <span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$dir</span>\n    <span class=\"token keyword\">fi</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>还有一个可优化的点是性能，在使用js脚本时会感知到命令启动有一点卡顿。</p>\n<p>使用js脚本当然很方便，不过他的启动时间相比小runtime的编译型语言来说还是差很多。而在<code class=\"language-text\">cd</code>这样的命令里，延时是比较重要的，我在使用js脚本时就能感知启动时有一点卡顿。</p>\n<p>测量一下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-&gt;  time descZHistory\ndescZHistory  0.06s user 0.02s system 95% cpu 0.091 total</code></pre></div>\n<p>执行时间接近100ms。再看一下Node自己启动的时间：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-&gt;  time node -e &#39;&#39;\nnode -e &#39;&#39;  0.06s user 0.02s system 95% cpu 0.080 total</code></pre></div>\n<p>Node自己启动的时间就达到80-90ms左右，在这个场景下时不可忍受的。</p>\n<p>所以换用Rust实现:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> dirs<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> regex<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> std<span class=\"token punctuation\">::</span>fs<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> Write<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span>home_dir<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> dirs<span class=\"token punctuation\">::</span><span class=\"token function\">home_dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">::</span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span>home_dir<span class=\"token punctuation\">.</span><span class=\"token function\">as_path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".z\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Open file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> re <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">::</span>Regex<span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">r\"\\d+$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> lines<span class=\"token punctuation\">:</span> Vec<span class=\"token operator\">&lt;</span>Vec<span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span>str<span class=\"token operator\">>></span> <span class=\"token operator\">=</span> data\n            <span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token operator\">|</span>l<span class=\"token operator\">|</span> re<span class=\"token punctuation\">.</span><span class=\"token function\">is_match</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token punctuation\">|</span>l<span class=\"token punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">let</span> arr<span class=\"token punctuation\">:</span> Vec<span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span>str<span class=\"token operator\">></span> <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token char string\">'|'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                arr\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lines<span class=\"token punctuation\">.</span><span class=\"token function\">sort_by</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token punctuation\">|</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> score_a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span>f64<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> score_b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span>f64<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            score_b<span class=\"token punctuation\">.</span><span class=\"token function\">partial_cmp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>score_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> stdout <span class=\"token operator\">=</span> io<span class=\"token punctuation\">::</span><span class=\"token function\">stdout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> handle <span class=\"token operator\">=</span> io<span class=\"token punctuation\">::</span>BufWriter<span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> l <span class=\"token keyword\">in</span> lines<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">writeln!</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">,</span> <span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">eprintln!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can not get home dir\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Rust的结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-&gt;  time desc_z_history\ndesc_z_history  0.00s user 0.00s system 34% cpu 0.010 total</code></pre></div>\n<p>整个程序的时间能控制在10-20ms左右，达到要求了。</p>\n<p>这样这个命令就比较令人满意了，在这个命令的基础上可以做一些小拓展，例如我加了一些打开常用编辑器的辅助命令，实现模糊查询并使用编辑器打开某个项目/文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> <span class=\"token function-name function\">code_editor_base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -z <span class=\"token variable\">$2</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># if not passing parameter, open current directory</span>\n  <span class=\"token keyword\">then</span>\n    <span class=\"token variable\">$1</span> <span class=\"token builtin class-name\">.</span>\n    <span class=\"token builtin class-name\">return</span>\n  <span class=\"token keyword\">fi</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -f <span class=\"token variable\">$2</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># if file exists, open the file directly</span>\n  <span class=\"token keyword\">then</span>\n    <span class=\"token variable\">$1</span> <span class=\"token variable\">$2</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$2</span>\n    <span class=\"token variable\">$1</span> <span class=\"token builtin class-name\">.</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  code_editor_base code <span class=\"token variable\">$1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">v</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  code_editor_base <span class=\"token function\">vim</span> <span class=\"token variable\">$1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">gol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  code_editor_base goland <span class=\"token variable\">$1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">cha</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  code_editor_base charm <span class=\"token variable\">$1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">i</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  code_editor_base idea <span class=\"token variable\">$1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"重新定义cd命令","date":"June 15, 2019","description":"支持模糊跳转的cd"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Redefine cd/","previous":null,"next":{"fields":{"slug":"/Kubernenes 101/"},"frontmatter":{"title":"Kubernetes 101"}}}}}